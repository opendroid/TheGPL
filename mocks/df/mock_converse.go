// Code generated by MockGen. DO NOT EDIT.
// Source: clients/df/converse.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	df "github.com/opendroid/the-gpl/clients/df"
	reflect "reflect"
)

// MockBot is a mock of Bot interface
type MockBot struct {
	ctrl     *gomock.Controller
	recorder *MockBotMockRecorder
}

// MockBotMockRecorder is the mock recorder for MockBot
type MockBotMockRecorder struct {
	mock *MockBot
}

// NewMockBot creates a new mock instance
func NewMockBot(ctrl *gomock.Controller) *MockBot {
	mock := &MockBot{ctrl: ctrl}
	mock.recorder = &MockBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBot) EXPECT() *MockBotMockRecorder {
	return m.recorder
}

// Converse mocks base method
func (m *MockBot) Converse(s *df.AgentSession, q string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Converse", s, q)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Converse indicates an expected call of Converse
func (mr *MockBotMockRecorder) Converse(s, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Converse", reflect.TypeOf((*MockBot)(nil).Converse), s, q)
}
